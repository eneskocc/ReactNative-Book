"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_native_1 = require("react-native");
;
// Screen Dimensions
const { height, width } = react_native_1.Dimensions.get('window');
// Component: Slide Modal
const SlideModal = (props) => {
    // Render Modal Header Container Style
    const renderModalHeaderContainerStyle = () => {
        // Dark Mode
        if (props.darkMode) {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'space-between',
                alignItems: 'center',
                width: width,
                height: props.customStyleModalHeaderContainer?.modalHeaderContainerDark.height ? props.customStyleModalHeaderContainer.modalHeaderContainerDark.height : 55,
                backgroundColor: props.customStyleModalHeaderContainer?.modalHeaderContainerDark.backgroundColor ? props.customStyleModalHeaderContainer.modalHeaderContainerDark.backgroundColor : '#383838',
                borderColor: props.customStyleModalHeaderContainer?.modalHeaderContainerDark.borderColor ? props.customStyleModalHeaderContainer.modalHeaderContainerDark.borderColor : '#E9E9EB',
                borderBottomWidth: props.customStyleModalHeaderContainer?.modalHeaderContainerDark.borderBottomWidth ? props.customStyleModalHeaderContainer.modalHeaderContainerDark.borderBottomWidth : react_native_1.StyleSheet.hairlineWidth,
            });
        }
        // Light Mode
        else {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'space-between',
                alignItems: 'center',
                width: width,
                height: props.customStyleModalHeaderContainer?.modalHeaderContainerLight.height ? props.customStyleModalHeaderContainer.modalHeaderContainerLight.height : 55,
                backgroundColor: props.customStyleModalHeaderContainer?.modalHeaderContainerLight.backgroundColor ? props.customStyleModalHeaderContainer.modalHeaderContainerLight.backgroundColor : '#FFFFFF',
                borderColor: props.customStyleModalHeaderContainer?.modalHeaderContainerLight.borderColor ? props.customStyleModalHeaderContainer.modalHeaderContainerLight.borderColor : '#CED4DA',
                borderBottomWidth: props.customStyleModalHeaderContainer?.modalHeaderContainerLight.borderBottomWidth ? props.customStyleModalHeaderContainer.modalHeaderContainerLight.borderBottomWidth : react_native_1.StyleSheet.hairlineWidth,
            });
        }
    };
    // Render Cancel Text Style
    const renderCancelTextStyle = () => {
        // Dark Mode
        if (props.darkMode) {
            return ({
                marginLeft: 16,
                fontFamily: props.customStyleCancelText?.cancelTextDark.fontFamily ? props.customStyleCancelText.cancelTextDark.fontFamily : 'System',
                color: props.customStyleCancelText?.cancelTextDark.color ? props.customStyleCancelText.cancelTextDark.color : '#0884FE',
                fontWeight: props.customStyleCancelText?.cancelTextDark.fontWeight ? props.customStyleCancelText.cancelTextDark.fontWeight : '400',
                fontSize: props.customStyleCancelText?.cancelTextDark.fontSize ? props.customStyleCancelText.cancelTextDark.fontSize : 17,
            });
        }
        // Light Mode
        else {
            return ({
                marginLeft: 16,
                fontFamily: props.customStyleCancelText?.cancelTextLight.fontFamily ? props.customStyleCancelText.cancelTextLight.fontFamily : 'System',
                color: props.customStyleCancelText?.cancelTextLight.color ? props.customStyleCancelText.cancelTextLight.color : '#007AFF',
                fontWeight: props.customStyleCancelText?.cancelTextLight.fontWeight ? props.customStyleCancelText.cancelTextLight.fontWeight : '400',
                fontSize: props.customStyleCancelText?.cancelTextLight.fontSize ? props.customStyleCancelText.cancelTextLight.fontSize : 17,
            });
        }
    };
    // Render Done Text Style
    const renderDoneTextStyle = () => {
        // Dark Mode
        if (props.darkMode) {
            return props.customStylePickerItemText?.pickerItemTextDark.color ? props.customStylePickerItemText.pickerItemTextDark.color : '#0884FE';
        }
        // Light Mode
        else {
            return props.customStylePickerItemText?.pickerItemTextLight.color ? props.customStylePickerItemText.pickerItemTextLight.color : '#007AFF';
        }
    };
    // Render Bottom Sheet Modal Content Container Style
    const renderBottomSheetModalContentContainerStyle = () => {
        // Dark Mode
        if (props.darkMode) {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                width: width,
                height: props.customStyleModalContentContainer?.modalContentContainerDark.height ? props.customStyleModalContentContainer.modalContentContainerDark.height : 250,
                backgroundColor: props.customStyleModalContentContainer?.modalContentContainerDark.backgroundColor ? props.customStyleModalContentContainer.modalContentContainerDark.backgroundColor : '#121312',
            });
        }
        // Light Mode
        else {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                width: width,
                height: props.customStyleModalContentContainer?.modalContentContainerLight.height ? props.customStyleModalContentContainer.modalContentContainerLight.height : 250,
                backgroundColor: props.customStyleModalContentContainer?.modalContentContainerLight.backgroundColor ? props.customStyleModalContentContainer.modalContentContainerLight.backgroundColor : '#FFFFFF',
            });
        }
    };
    // Render Form Sheet Modal Content Container Style
    const renderFormSheetModalContentContainerStyle = () => {
        // Dark Mode
        if (props.darkMode) {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                width: width,
                backgroundColor: props.customStyleModalContentContainer?.modalContentContainerDark.backgroundColor ? props.customStyleModalContentContainer.modalContentContainerDark.backgroundColor : '#121312',
            });
        }
        // Light Mode
        else {
            return ({
                display: 'flex',
                flexDirection: 'row',
                justifyContent: 'center',
                alignItems: 'center',
                width: width,
                backgroundColor: props.customStyleModalContentContainer?.modalContentContainerLight.backgroundColor ? props.customStyleModalContentContainer.modalContentContainerLight.backgroundColor : '#FFFFFF',
            });
        }
    };
    // Render Modal Header Title
    const renderModalHeaderTitle = () => {
        // iOS Form Sheet + Check If Props Exists
        if (props.modalType === 'iOS Form Sheet' && props.modalHeaderTitle) {
            return (jsx_runtime_1.jsx(react_native_1.View, Object.assign({ style: styles.modalHeaderContainer }, { children: jsx_runtime_1.jsx(react_native_1.Text, Object.assign({ style: props.darkMode ? styles.modalHeaderTitleDark : styles.modalHeaderTitleLight, numberOfLines: 2 }, { children: props.modalHeaderTitle }), void 0) }), void 0));
        }
    };
    // Render Modal Type
    const renderModalType = () => {
        // iOS Form Sheet
        if (props.modalType === 'iOS Form Sheet') {
            return (jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: styles.modalClosedContainer }, { children: [jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: props.screenContainer }, void 0),
                    jsx_runtime_1.jsx(react_native_1.Modal, Object.assign({ animationType: "slide", visible: props.modalVisible, presentationStyle: "formSheet" }, { children: jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: styles.formSheetModalContainer }, { children: [jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: renderModalHeaderContainerStyle() }, { children: [jsx_runtime_1.jsx(react_native_1.TouchableOpacity, Object.assign({ onPress: props.pressCancel }, { children: jsx_runtime_1.jsx(react_native_1.Text, Object.assign({ style: renderCancelTextStyle() }, { children: "Cancel" }), void 0) }), void 0),
                                        jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: renderModalHeaderTitle() }, void 0),
                                        jsx_runtime_1.jsx(react_native_1.View, Object.assign({ style: styles.doneButtonContainer }, { children: jsx_runtime_1.jsx(react_native_1.Button, { title: "Done", onPress: props.pressDone, color: renderDoneTextStyle(), disabled: props.doneDisabled }, void 0) }), void 0)] }), void 0),
                                jsx_runtime_1.jsx(react_native_1.View, Object.assign({ style: renderFormSheetModalContentContainerStyle() }, { children: jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: props.modalContainer }, void 0) }), void 0)] }), void 0) }), void 0)] }), void 0));
        }
        else {
            return (jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: props.modalVisible ? styles.modalOpenContainer : styles.modalClosedContainer }, { children: [jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: props.screenContainer }, void 0),
                    jsx_runtime_1.jsx(react_native_1.Modal, Object.assign({ animationType: "slide", transparent: true, visible: props.modalVisible }, { children: jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: styles.bottomSheetModalContainer }, { children: [jsx_runtime_1.jsxs(react_native_1.View, Object.assign({ style: renderModalHeaderContainerStyle() }, { children: [jsx_runtime_1.jsx(react_native_1.TouchableOpacity, Object.assign({ onPress: props.pressCancel }, { children: jsx_runtime_1.jsx(react_native_1.Text, Object.assign({ style: renderCancelTextStyle() }, { children: "Cancel" }), void 0) }), void 0),
                                        jsx_runtime_1.jsx(react_native_1.View, Object.assign({ style: styles.doneButtonContainer }, { children: jsx_runtime_1.jsx(react_native_1.Button, { title: "Done", onPress: props.pressDone, color: renderDoneTextStyle(), disabled: props.doneDisabled }, void 0) }), void 0)] }), void 0),
                                jsx_runtime_1.jsx(react_native_1.View, Object.assign({ style: renderBottomSheetModalContentContainerStyle() }, { children: jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: props.modalContainer }, void 0) }), void 0)] }), void 0) }), void 0)] }), void 0));
        }
    };
    return (jsx_runtime_1.jsx(jsx_runtime_1.Fragment, { children: renderModalType() }, void 0));
};
const styles = react_native_1.StyleSheet.create({
    modalOpenContainer: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#000000',
        opacity: .3,
        width: width,
        height: height,
    },
    modalClosedContainer: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        width: width,
        height: height,
    },
    bottomSheetModalContainer: {
        display: 'flex',
        justifyContent: 'flex-end',
        alignItems: 'center',
        width: width,
        height: height,
    },
    formSheetModalContainer: {
        display: 'flex',
        justifyContent: 'flex-end',
        alignItems: 'center',
    },
    modalHeaderContainer: {
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        width: width - 140,
        paddingLeft: 16,
        paddingRight: 16,
    },
    modalHeaderTitleLight: {
        fontFamily: 'System',
        fontSize: 13,
        fontWeight: '500',
        color: '#000000',
        textAlign: 'center',
    },
    modalHeaderTitleDark: {
        fontFamily: 'System',
        fontSize: 13,
        fontWeight: '500',
        color: '#FFFFFF',
        textAlign: 'center',
    },
    doneButtonContainer: {
        marginRight: 10,
    },
});
// Exports
exports.default = SlideModal;
